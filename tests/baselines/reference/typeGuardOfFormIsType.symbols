=== tests/cases/conformance/expressions/typeGuards/typeGuardOfFormIsType.ts ===
// A type guard of the form x instanceof C, where C is of a subtype of the global type 'Function' 
// and C has a property named 'prototype'
//  - when true, narrows the type of x to the type of the 'prototype' property in C provided 
//    it is a subtype of the type of x, or
//  - when false, has no effect on the type of x.

class C1 {
>C1 : Symbol(C1, Decl(typeGuardOfFormIsType.ts, 0, 0))

    p1: string;
>p1 : Symbol(p1, Decl(typeGuardOfFormIsType.ts, 6, 10))
}
class C2 {
>C2 : Symbol(C2, Decl(typeGuardOfFormIsType.ts, 8, 1))

    p2: number;
>p2 : Symbol(p2, Decl(typeGuardOfFormIsType.ts, 9, 10))
}
class D1 extends C1 {
>D1 : Symbol(D1, Decl(typeGuardOfFormIsType.ts, 11, 1))
>C1 : Symbol(C1, Decl(typeGuardOfFormIsType.ts, 0, 0))

    p3: number;
>p3 : Symbol(p3, Decl(typeGuardOfFormIsType.ts, 12, 21))
}
var str: string;
>str : Symbol(str, Decl(typeGuardOfFormIsType.ts, 15, 3))

var num: number;
>num : Symbol(num, Decl(typeGuardOfFormIsType.ts, 16, 3))

var strOrNum: string | number;
>strOrNum : Symbol(strOrNum, Decl(typeGuardOfFormIsType.ts, 17, 3))

function isC1(x: any): x is C1 {
>isC1 : Symbol(isC1, Decl(typeGuardOfFormIsType.ts, 17, 30))
>x : Symbol(x, Decl(typeGuardOfFormIsType.ts, 19, 14))
>C1 : Symbol(C1, Decl(typeGuardOfFormIsType.ts, 0, 0))

	return true;
}

function isC2(x: any): x is C2 {
>isC2 : Symbol(isC2, Decl(typeGuardOfFormIsType.ts, 21, 1))
>x : Symbol(x, Decl(typeGuardOfFormIsType.ts, 23, 14))
>C2 : Symbol(C2, Decl(typeGuardOfFormIsType.ts, 8, 1))

	return true;
}

function isD1(x: any): x is D1 {
>isD1 : Symbol(isD1, Decl(typeGuardOfFormIsType.ts, 25, 1))
>x : Symbol(x, Decl(typeGuardOfFormIsType.ts, 27, 14))
>D1 : Symbol(D1, Decl(typeGuardOfFormIsType.ts, 11, 1))

	return true;
}

var c1Orc2: C1 | C2;
>c1Orc2 : Symbol(c1Orc2, Decl(typeGuardOfFormIsType.ts, 31, 3))
>C1 : Symbol(C1, Decl(typeGuardOfFormIsType.ts, 0, 0))
>C2 : Symbol(C2, Decl(typeGuardOfFormIsType.ts, 8, 1))

str = isC1(c1Orc2) && c1Orc2.p1; // C1
>str : Symbol(str, Decl(typeGuardOfFormIsType.ts, 15, 3))
>isC1 : Symbol(isC1, Decl(typeGuardOfFormIsType.ts, 17, 30))
>c1Orc2 : Symbol(c1Orc2, Decl(typeGuardOfFormIsType.ts, 31, 3))
>c1Orc2.p1 : Symbol(C1.p1, Decl(typeGuardOfFormIsType.ts, 6, 10))
>c1Orc2 : Symbol(c1Orc2, Decl(typeGuardOfFormIsType.ts, 31, 3))
>p1 : Symbol(C1.p1, Decl(typeGuardOfFormIsType.ts, 6, 10))

num = isC2(c1Orc2) && c1Orc2.p2; // C2
>num : Symbol(num, Decl(typeGuardOfFormIsType.ts, 16, 3))
>isC2 : Symbol(isC2, Decl(typeGuardOfFormIsType.ts, 21, 1))
>c1Orc2 : Symbol(c1Orc2, Decl(typeGuardOfFormIsType.ts, 31, 3))
>c1Orc2.p2 : Symbol(C2.p2, Decl(typeGuardOfFormIsType.ts, 9, 10))
>c1Orc2 : Symbol(c1Orc2, Decl(typeGuardOfFormIsType.ts, 31, 3))
>p2 : Symbol(C2.p2, Decl(typeGuardOfFormIsType.ts, 9, 10))

str = isD1(c1Orc2) && c1Orc2.p1; // D1
>str : Symbol(str, Decl(typeGuardOfFormIsType.ts, 15, 3))
>isD1 : Symbol(isD1, Decl(typeGuardOfFormIsType.ts, 25, 1))
>c1Orc2 : Symbol(c1Orc2, Decl(typeGuardOfFormIsType.ts, 31, 3))
>c1Orc2.p1 : Symbol(C1.p1, Decl(typeGuardOfFormIsType.ts, 6, 10))
>c1Orc2 : Symbol(c1Orc2, Decl(typeGuardOfFormIsType.ts, 31, 3))
>p1 : Symbol(C1.p1, Decl(typeGuardOfFormIsType.ts, 6, 10))

num = isD1(c1Orc2) && c1Orc2.p3; // D1
>num : Symbol(num, Decl(typeGuardOfFormIsType.ts, 16, 3))
>isD1 : Symbol(isD1, Decl(typeGuardOfFormIsType.ts, 25, 1))
>c1Orc2 : Symbol(c1Orc2, Decl(typeGuardOfFormIsType.ts, 31, 3))
>c1Orc2.p3 : Symbol(D1.p3, Decl(typeGuardOfFormIsType.ts, 12, 21))
>c1Orc2 : Symbol(c1Orc2, Decl(typeGuardOfFormIsType.ts, 31, 3))
>p3 : Symbol(D1.p3, Decl(typeGuardOfFormIsType.ts, 12, 21))

var c2Ord1: C2 | D1;
>c2Ord1 : Symbol(c2Ord1, Decl(typeGuardOfFormIsType.ts, 37, 3))
>C2 : Symbol(C2, Decl(typeGuardOfFormIsType.ts, 8, 1))
>D1 : Symbol(D1, Decl(typeGuardOfFormIsType.ts, 11, 1))

num = isC2(c2Ord1) && c2Ord1.p2; // C2
>num : Symbol(num, Decl(typeGuardOfFormIsType.ts, 16, 3))
>isC2 : Symbol(isC2, Decl(typeGuardOfFormIsType.ts, 21, 1))
>c2Ord1 : Symbol(c2Ord1, Decl(typeGuardOfFormIsType.ts, 37, 3))
>c2Ord1.p2 : Symbol(C2.p2, Decl(typeGuardOfFormIsType.ts, 9, 10))
>c2Ord1 : Symbol(c2Ord1, Decl(typeGuardOfFormIsType.ts, 37, 3))
>p2 : Symbol(C2.p2, Decl(typeGuardOfFormIsType.ts, 9, 10))

num = isD1(c2Ord1) && c2Ord1.p3; // D1
>num : Symbol(num, Decl(typeGuardOfFormIsType.ts, 16, 3))
>isD1 : Symbol(isD1, Decl(typeGuardOfFormIsType.ts, 25, 1))
>c2Ord1 : Symbol(c2Ord1, Decl(typeGuardOfFormIsType.ts, 37, 3))
>c2Ord1.p3 : Symbol(D1.p3, Decl(typeGuardOfFormIsType.ts, 12, 21))
>c2Ord1 : Symbol(c2Ord1, Decl(typeGuardOfFormIsType.ts, 37, 3))
>p3 : Symbol(D1.p3, Decl(typeGuardOfFormIsType.ts, 12, 21))

str = isD1(c2Ord1) && c2Ord1.p1; // D1
>str : Symbol(str, Decl(typeGuardOfFormIsType.ts, 15, 3))
>isD1 : Symbol(isD1, Decl(typeGuardOfFormIsType.ts, 25, 1))
>c2Ord1 : Symbol(c2Ord1, Decl(typeGuardOfFormIsType.ts, 37, 3))
>c2Ord1.p1 : Symbol(C1.p1, Decl(typeGuardOfFormIsType.ts, 6, 10))
>c2Ord1 : Symbol(c2Ord1, Decl(typeGuardOfFormIsType.ts, 37, 3))
>p1 : Symbol(C1.p1, Decl(typeGuardOfFormIsType.ts, 6, 10))

var r2: C2 | D1 = isC1(c2Ord1) && c2Ord1; // C2 | D1
>r2 : Symbol(r2, Decl(typeGuardOfFormIsType.ts, 41, 3))
>C2 : Symbol(C2, Decl(typeGuardOfFormIsType.ts, 8, 1))
>D1 : Symbol(D1, Decl(typeGuardOfFormIsType.ts, 11, 1))
>isC1 : Symbol(isC1, Decl(typeGuardOfFormIsType.ts, 17, 30))
>c2Ord1 : Symbol(c2Ord1, Decl(typeGuardOfFormIsType.ts, 37, 3))
>c2Ord1 : Symbol(c2Ord1, Decl(typeGuardOfFormIsType.ts, 37, 3))

